# ================================
# Env selector
# ================================
env: "dev1"
dns:
  subdomain: "ndev1"
  domain: "az.vzp.cz"
# ================================
# Namespaces (env)
# ================================
namespaces:
  kafka: kafka
  kafkaUi: kafka-ui
  schemaRegistry: schema-registry

# ================================
# Azure (env)
# ================================
azure:
  keyVaultName: "kv-vzp-dev1-we-aks-002"
  uamiClientId: ""  # CHANGE IT

# AKV CSI objects
oauthAkvAudienceObjectName: ""
oauthAkvTenantObjectName:   ""

# ================================
# KafkaUser principals (env)
# ================================
kafkaUsers:
  enabled: true
  ui:
    principal: ""  # CHANGE IT
  lag:
    principal: ""  # CHANGE IT
  schema:
    principal: ""  # CHANGE IT
    
# ================================
# Kafka (env)
# ================================
kafka:
  name: "kafka-vzp-dev1-we-002"
  oauth:
    audienceAppId: ""  # CHANGE IT
  authorization:
    type: simple
    superUsers:
      - "CN=kafka-vzp-dev1-we-002-entity-operator"
  nodePools:
    - name: broker
      replicas: 1
      roles: [broker, controller]
      storage:
        type: jbod
        volumes:
          - id: 0
            type: persistent-claim
            size: 20Gi
            class: managed-csi
            kraftMetadata: shared
            deleteClaim: false

  config:
    default.replication.factor: 1
    offsets.topic.replication.factor: 1
    transaction.state.log.replication.factor: 1
    min.insync.replicas: 1
    transaction.state.log.min.isr: 1

  listeners:
    internal:
      issuerVersion: v2
      port: 9092
      tls: true

    external:
      port: 9094
      tls: true
      issuerVersion: v2
      bootstrap:
        loadBalancerIP: ""
      brokers:
        - id: 0
          advertisedHost: kafka-0.ndev1.az.vzp.cz
          loadBalancerIP: ""

# ================================
# Kafka-UI (env)
# ================================
kafkaUi:
  names:
    internal: "in-cluster"
    external: "aks-external"
  ingress: { enabled: false }
  service:
    type: LoadBalancer
    port: 80
    annotations: {}
  sso:
    clientIdAkvName: ""
    clientSecretAkvName: ""
  oauth:
    issuerVersion: v2
    securityProtocol: "SASL_SSL"
    k8sSecretName: kafka-ui-oauth
    jaasKey: "sasl-jaas-config"
  tls:
    caSecretName: ""
    caCertificate: ca.crt
    mountPath: /etc/kafka/cluster-ca
  externalCluster:
    enabled: true
    name: "aks-external"
    bootstrapServers: "kafka.ndev1.az.vzp.cz:9094"
    securityProtocol: "SASL_SSL"
    schemaRegistryUrl: ""
    tls:
      caSecretName: "kafka-external-ca"
      caCertificate: ca.crt
      mountPath: /etc/kafka/external-ca
    oauth: {}
  schemaRegistryUrl: "http://schema-registry.ndev1.az.vzp.cz:8081"
  auth: { type: OAUTH2 }
  domain: ""

# ================================
# Schema Registry (env)
# ================================
schemaRegistry:
  enabled: true
  image: "confluentinc/cp-schema-registry:7.9.0"
  replicas: 1
  service:
    type: ClusterIP
    port: 8081
  kafkaBootstrap: "kafka-vzp-dev1-we-002-kafka-bootstrap.kafka.svc.cluster.local:9092"
  compatibilityLevel: "BACKWARD"
  kafkastoreReplicationFactor: 3
  securityProtocol: "SASL_SSL"
  oauth:
    issuerVersion: v2
    k8sSecretName: schema-registry-oauth
    jaasKey: sasl-jaas-config
  tls:
    caSecretName: ""
    caCertificate: ca.crt
    mountPath: /etc/kafka/cluster-ca

# ================================
kafkaExporter:
  enabled: true
  securityProtocol: "SASL_SSL"
  oauth:
    k8sSecretName: kafka-lag-exporter-oauth
    jaasKey: sasl-jaas-config
  tls:
    caSecretName: ""
    caCertificate: ca.crt
    mountPath: /etc/kafka/cluster-ca

# ================================
# Topics (env-specific)
# ================================
topics: []
